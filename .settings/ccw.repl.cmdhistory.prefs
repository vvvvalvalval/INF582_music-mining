cmdhistory=["(clojure.core/use 'clojure.core)" "(import 'org.herac.tuxguitar.io.tg)" "(def settings (GTPSettings.))" "(class settings)" "(.getCharset settings)" "(. settings getCharset)" "(doc clojure.java.io/resource)" "(clojure.core/use 'clojure.core)" "(doc clojure.java.io/resource)" "(use 'clojure.repl)" "(doc clojure.java.io/resource)" "(use 'clojure.java.io/resource)" "(require '[clojure.java.io \:only resource])" "(resource \\"hello.txt\\")" "(require '[clojure.java.io \:as cio])" "(cio/resource \\"sample-file.txt\\")" "(def my-file-url (cio/resource \\"sample-file.txt\\"))" "my-file-url" "(def my-stream (java.io.FileInputStream. my-file-url))" "(def my-stream (. my-file-url openStream))" "(class my-stream)" "(. my-stream read)" "(. my-stream close)" "(defn open-my-stream [] (. my-file-url openStream))" "(def my-reader (BufferedReader. (InputStreamReader. (open-my-stream))))" "(class my-reader)" "(. my-reader readLine)" "(. my-reader close)" "(def my-tg-factory (TGFactory.))" "(. my-tg-factory newBeat)" "(def my-beat (. my-tg-factory newBeat))" "(class my-beat)" "(. my-stream close)" "(defn mygp3 []\\n  (resource-as-stream \\"sample-gp3.gp3\\"))" "(def myGP3stream (mygp3))" "(def gp3-is (GP3InputStream. settings))" "(class gp3-is)" "(. gp3-is (init my-tg-factory myGP3stream))" "(. gp3-is readSong)" "(. *1 getName)" "(. myGP3stream close)" "GP1InputStream." "GP4InputStream." "GP1InputStream" "(class GP1InputStream.)" "(class GP1InputStream)" "(def myclass java.util.HashMap)" "(myclass.)" "(def hm (new myclass))" "(GP1InputStream/GP1InputStream)" "(use 'clojure.tools.nrepl)" "(use 'clojure.repl)" "(doc new)" "(def my-class HashMap)" "(def my-class Object)" "(new myclass)" "(doc new)" "(new \\"Object\\")" "(new \\"java.lang.Object\\")" "(doc apply)" "(apply String '(\\"hello\\"))" "(doc with-open)" "(doc doto)" "(read-song\\n  (resource-as-stream \\"sample-gp3.gp3\\")\\n  \:gp3)" "(read-song\\n     (resource-as-stream \\"sample-gp3.gp3\\")\\n     \:gp3)" "(. *1 getName)" "(doc doto)" "(read-song\\n     (resource-as-stream \\"sample-gp3.gp3\\")\\n     \:gp3)" "(. *1 getName)" "*1" "(def my-song *2)" "my-song" "(def my-song (read-song\\n        (resource-as-stream \\"sample-gp3.gp3\\")\\n        \:gp3))" "my-song" "(. my-song toString)" "(. my-song getArtist)" "(. my-song getDate)" "(. my-song getMeasureHeaders)"]
eclipse.preferences.version=1
